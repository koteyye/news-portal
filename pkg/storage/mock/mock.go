// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	models "github.com/koteyye/news-portal/pkg/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// CreateComment mocks base method.
func (m *MockStorage) CreateComment(ctx context.Context, newsID uuid.UUID, comment *models.Comment) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, newsID, comment)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockStorageMockRecorder) CreateComment(ctx, newsID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockStorage)(nil).CreateComment), ctx, newsID, comment)
}

// CreateLike mocks base method.
func (m *MockStorage) CreateLike(ctx context.Context, newsID, likerID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", ctx, newsID, likerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockStorageMockRecorder) CreateLike(ctx, newsID, likerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockStorage)(nil).CreateLike), ctx, newsID, likerID)
}

// CreateLogin mocks base method.
func (m *MockStorage) CreateLogin(ctx context.Context, login, hashPassword string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogin", ctx, login, hashPassword)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogin indicates an expected call of CreateLogin.
func (mr *MockStorageMockRecorder) CreateLogin(ctx, login, hashPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogin", reflect.TypeOf((*MockStorage)(nil).CreateLogin), ctx, login, hashPassword)
}

// CreateNews mocks base method.
func (m *MockStorage) CreateNews(ctx context.Context, newsAttr *models.NewsAttributes) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNews", ctx, newsAttr)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNews indicates an expected call of CreateNews.
func (mr *MockStorageMockRecorder) CreateNews(ctx, newsAttr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNews", reflect.TypeOf((*MockStorage)(nil).CreateNews), ctx, newsAttr)
}

// CreateProfileByUserID mocks base method.
func (m *MockStorage) CreateProfileByUserID(ctx context.Context, userID uuid.UUID, profile *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileByUserID", ctx, userID, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfileByUserID indicates an expected call of CreateProfileByUserID.
func (mr *MockStorageMockRecorder) CreateProfileByUserID(ctx, userID, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileByUserID", reflect.TypeOf((*MockStorage)(nil).CreateProfileByUserID), ctx, userID, profile)
}

// DeleteComment mocks base method.
func (m *MockStorage) DeleteComment(ctx context.Context, commentID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockStorageMockRecorder) DeleteComment(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockStorage)(nil).DeleteComment), ctx, commentID)
}

// DeleteLike mocks base method.
func (m *MockStorage) DeleteLike(ctx context.Context, newsID, likerID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", ctx, newsID, likerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockStorageMockRecorder) DeleteLike(ctx, newsID, likerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockStorage)(nil).DeleteLike), ctx, newsID, likerID)
}

// DeleteNewsByID mocks base method.
func (m *MockStorage) DeleteNewsByID(ctx context.Context, newsID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNewsByID", ctx, newsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNewsByID indicates an expected call of DeleteNewsByID.
func (mr *MockStorageMockRecorder) DeleteNewsByID(ctx, newsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNewsByID", reflect.TypeOf((*MockStorage)(nil).DeleteNewsByID), ctx, newsID)
}

// DeleteUserByIDs mocks base method.
func (m *MockStorage) DeleteUserByIDs(ctx context.Context, userIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByIDs", ctx, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByIDs indicates an expected call of DeleteUserByIDs.
func (mr *MockStorageMockRecorder) DeleteUserByIDs(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByIDs", reflect.TypeOf((*MockStorage)(nil).DeleteUserByIDs), ctx, userIDs)
}

// EditComment mocks base method.
func (m *MockStorage) EditComment(ctx context.Context, comment *models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditComment indicates an expected call of EditComment.
func (mr *MockStorageMockRecorder) EditComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockStorage)(nil).EditComment), ctx, comment)
}

// EditNewsByID mocks base method.
func (m *MockStorage) EditNewsByID(ctx context.Context, newsID, userUpdated uuid.UUID, newsAttr *models.NewsAttributes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditNewsByID", ctx, newsID, userUpdated, newsAttr)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditNewsByID indicates an expected call of EditNewsByID.
func (mr *MockStorageMockRecorder) EditNewsByID(ctx, newsID, userUpdated, newsAttr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditNewsByID", reflect.TypeOf((*MockStorage)(nil).EditNewsByID), ctx, newsID, userUpdated, newsAttr)
}

// EditRoles mocks base method.
func (m *MockStorage) EditRoles(ctx context.Context, userID uuid.UUID, roles []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRoles", ctx, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditRoles indicates an expected call of EditRoles.
func (mr *MockStorageMockRecorder) EditRoles(ctx, userID, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRoles", reflect.TypeOf((*MockStorage)(nil).EditRoles), ctx, userID, roles)
}

// EditUserByID mocks base method.
func (m *MockStorage) EditUserByID(ctx context.Context, profile *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserByID", ctx, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserByID indicates an expected call of EditUserByID.
func (mr *MockStorageMockRecorder) EditUserByID(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserByID", reflect.TypeOf((*MockStorage)(nil).EditUserByID), ctx, profile)
}

// GetCommentsByNewsID mocks base method.
func (m *MockStorage) GetCommentsByNewsID(ctx context.Context, newsID uuid.UUID) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByNewsID", ctx, newsID)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByNewsID indicates an expected call of GetCommentsByNewsID.
func (mr *MockStorageMockRecorder) GetCommentsByNewsID(ctx, newsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByNewsID", reflect.TypeOf((*MockStorage)(nil).GetCommentsByNewsID), ctx, newsID)
}

// GetDeletingFiles mocks base method.
func (m *MockStorage) GetDeletingFiles(ctx context.Context) ([]*models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletingFiles", ctx)
	ret0, _ := ret[0].([]*models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletingFiles indicates an expected call of GetDeletingFiles.
func (mr *MockStorageMockRecorder) GetDeletingFiles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletingFiles", reflect.TypeOf((*MockStorage)(nil).GetDeletingFiles), ctx)
}

// GetHashedPasswordByLogin mocks base method.
func (m *MockStorage) GetHashedPasswordByLogin(ctx context.Context, login string) (uuid.UUID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashedPasswordByLogin", ctx, login)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHashedPasswordByLogin indicates an expected call of GetHashedPasswordByLogin.
func (mr *MockStorageMockRecorder) GetHashedPasswordByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashedPasswordByLogin", reflect.TypeOf((*MockStorage)(nil).GetHashedPasswordByLogin), ctx, login)
}

// GetLikesByNewsID mocks base method.
func (m *MockStorage) GetLikesByNewsID(ctx context.Context, newsID uuid.UUID) ([]*models.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesByNewsID", ctx, newsID)
	ret0, _ := ret[0].([]*models.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesByNewsID indicates an expected call of GetLikesByNewsID.
func (mr *MockStorageMockRecorder) GetLikesByNewsID(ctx, newsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesByNewsID", reflect.TypeOf((*MockStorage)(nil).GetLikesByNewsID), ctx, newsID)
}

// GetNewsByIDs mocks base method.
func (m *MockStorage) GetNewsByIDs(ctx context.Context, newsIDs []uuid.UUID) ([]*models.NewsAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsByIDs", ctx, newsIDs)
	ret0, _ := ret[0].([]*models.NewsAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsByIDs indicates an expected call of GetNewsByIDs.
func (mr *MockStorageMockRecorder) GetNewsByIDs(ctx, newsIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsByIDs", reflect.TypeOf((*MockStorage)(nil).GetNewsByIDs), ctx, newsIDs)
}

// GetNewsFileByID mocks base method.
func (m *MockStorage) GetNewsFileByID(ctx context.Context, fileID uuid.UUID) (*models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsFileByID", ctx, fileID)
	ret0, _ := ret[0].(*models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsFileByID indicates an expected call of GetNewsFileByID.
func (mr *MockStorageMockRecorder) GetNewsFileByID(ctx, fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsFileByID", reflect.TypeOf((*MockStorage)(nil).GetNewsFileByID), ctx, fileID)
}

// GetNewsList mocks base method.
func (m *MockStorage) GetNewsList(ctx context.Context, limit, offset int) ([]*models.NewsAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsList", ctx, limit, offset)
	ret0, _ := ret[0].([]*models.NewsAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsList indicates an expected call of GetNewsList.
func (mr *MockStorageMockRecorder) GetNewsList(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsList", reflect.TypeOf((*MockStorage)(nil).GetNewsList), ctx, limit, offset)
}

// GetUserListByIDs mocks base method.
func (m *MockStorage) GetUserListByIDs(ctx context.Context, userIDs []uuid.UUID) ([]*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserListByIDs", ctx, userIDs)
	ret0, _ := ret[0].([]*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserListByIDs indicates an expected call of GetUserListByIDs.
func (mr *MockStorageMockRecorder) GetUserListByIDs(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserListByIDs", reflect.TypeOf((*MockStorage)(nil).GetUserListByIDs), ctx, userIDs)
}

// SetHardDeletedFilesByIDs mocks base method.
func (m *MockStorage) SetHardDeletedFilesByIDs(ctx context.Context, files []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHardDeletedFilesByIDs", ctx, files)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHardDeletedFilesByIDs indicates an expected call of SetHardDeletedFilesByIDs.
func (mr *MockStorageMockRecorder) SetHardDeletedFilesByIDs(ctx, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHardDeletedFilesByIDs", reflect.TypeOf((*MockStorage)(nil).SetHardDeletedFilesByIDs), ctx, files)
}

// SetUserRoles mocks base method.
func (m *MockStorage) SetUserRoles(ctx context.Context, userID uuid.UUID, roles []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserRoles", ctx, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserRoles indicates an expected call of SetUserRoles.
func (mr *MockStorageMockRecorder) SetUserRoles(ctx, userID, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserRoles", reflect.TypeOf((*MockStorage)(nil).SetUserRoles), ctx, userID, roles)
}

// MockAuthorizarion is a mock of Authorizarion interface.
type MockAuthorizarion struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizarionMockRecorder
}

// MockAuthorizarionMockRecorder is the mock recorder for MockAuthorizarion.
type MockAuthorizarionMockRecorder struct {
	mock *MockAuthorizarion
}

// NewMockAuthorizarion creates a new mock instance.
func NewMockAuthorizarion(ctrl *gomock.Controller) *MockAuthorizarion {
	mock := &MockAuthorizarion{ctrl: ctrl}
	mock.recorder = &MockAuthorizarionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizarion) EXPECT() *MockAuthorizarionMockRecorder {
	return m.recorder
}

// CreateLogin mocks base method.
func (m *MockAuthorizarion) CreateLogin(ctx context.Context, login, hashPassword string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogin", ctx, login, hashPassword)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogin indicates an expected call of CreateLogin.
func (mr *MockAuthorizarionMockRecorder) CreateLogin(ctx, login, hashPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogin", reflect.TypeOf((*MockAuthorizarion)(nil).CreateLogin), ctx, login, hashPassword)
}

// GetHashedPasswordByLogin mocks base method.
func (m *MockAuthorizarion) GetHashedPasswordByLogin(ctx context.Context, login string) (uuid.UUID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashedPasswordByLogin", ctx, login)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHashedPasswordByLogin indicates an expected call of GetHashedPasswordByLogin.
func (mr *MockAuthorizarionMockRecorder) GetHashedPasswordByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashedPasswordByLogin", reflect.TypeOf((*MockAuthorizarion)(nil).GetHashedPasswordByLogin), ctx, login)
}

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// CreateProfileByUserID mocks base method.
func (m *MockUsers) CreateProfileByUserID(ctx context.Context, userID uuid.UUID, profile *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileByUserID", ctx, userID, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfileByUserID indicates an expected call of CreateProfileByUserID.
func (mr *MockUsersMockRecorder) CreateProfileByUserID(ctx, userID, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileByUserID", reflect.TypeOf((*MockUsers)(nil).CreateProfileByUserID), ctx, userID, profile)
}

// DeleteUserByIDs mocks base method.
func (m *MockUsers) DeleteUserByIDs(ctx context.Context, userIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByIDs", ctx, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByIDs indicates an expected call of DeleteUserByIDs.
func (mr *MockUsersMockRecorder) DeleteUserByIDs(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByIDs", reflect.TypeOf((*MockUsers)(nil).DeleteUserByIDs), ctx, userIDs)
}

// EditRoles mocks base method.
func (m *MockUsers) EditRoles(ctx context.Context, userID uuid.UUID, roles []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRoles", ctx, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditRoles indicates an expected call of EditRoles.
func (mr *MockUsersMockRecorder) EditRoles(ctx, userID, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRoles", reflect.TypeOf((*MockUsers)(nil).EditRoles), ctx, userID, roles)
}

// EditUserByID mocks base method.
func (m *MockUsers) EditUserByID(ctx context.Context, profile *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserByID", ctx, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserByID indicates an expected call of EditUserByID.
func (mr *MockUsersMockRecorder) EditUserByID(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserByID", reflect.TypeOf((*MockUsers)(nil).EditUserByID), ctx, profile)
}

// GetUserListByIDs mocks base method.
func (m *MockUsers) GetUserListByIDs(ctx context.Context, userIDs []uuid.UUID) ([]*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserListByIDs", ctx, userIDs)
	ret0, _ := ret[0].([]*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserListByIDs indicates an expected call of GetUserListByIDs.
func (mr *MockUsersMockRecorder) GetUserListByIDs(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserListByIDs", reflect.TypeOf((*MockUsers)(nil).GetUserListByIDs), ctx, userIDs)
}

// SetUserRoles mocks base method.
func (m *MockUsers) SetUserRoles(ctx context.Context, userID uuid.UUID, roles []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserRoles", ctx, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserRoles indicates an expected call of SetUserRoles.
func (mr *MockUsersMockRecorder) SetUserRoles(ctx, userID, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserRoles", reflect.TypeOf((*MockUsers)(nil).SetUserRoles), ctx, userID, roles)
}

// MockAvatar is a mock of Avatar interface.
type MockAvatar struct {
	ctrl     *gomock.Controller
	recorder *MockAvatarMockRecorder
}

// MockAvatarMockRecorder is the mock recorder for MockAvatar.
type MockAvatarMockRecorder struct {
	mock *MockAvatar
}

// NewMockAvatar creates a new mock instance.
func NewMockAvatar(ctrl *gomock.Controller) *MockAvatar {
	mock := &MockAvatar{ctrl: ctrl}
	mock.recorder = &MockAvatarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvatar) EXPECT() *MockAvatarMockRecorder {
	return m.recorder
}

// MockNews is a mock of News interface.
type MockNews struct {
	ctrl     *gomock.Controller
	recorder *MockNewsMockRecorder
}

// MockNewsMockRecorder is the mock recorder for MockNews.
type MockNewsMockRecorder struct {
	mock *MockNews
}

// NewMockNews creates a new mock instance.
func NewMockNews(ctrl *gomock.Controller) *MockNews {
	mock := &MockNews{ctrl: ctrl}
	mock.recorder = &MockNewsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNews) EXPECT() *MockNewsMockRecorder {
	return m.recorder
}

// CreateNews mocks base method.
func (m *MockNews) CreateNews(ctx context.Context, newsAttr *models.NewsAttributes) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNews", ctx, newsAttr)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNews indicates an expected call of CreateNews.
func (mr *MockNewsMockRecorder) CreateNews(ctx, newsAttr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNews", reflect.TypeOf((*MockNews)(nil).CreateNews), ctx, newsAttr)
}

// DeleteNewsByID mocks base method.
func (m *MockNews) DeleteNewsByID(ctx context.Context, newsID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNewsByID", ctx, newsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNewsByID indicates an expected call of DeleteNewsByID.
func (mr *MockNewsMockRecorder) DeleteNewsByID(ctx, newsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNewsByID", reflect.TypeOf((*MockNews)(nil).DeleteNewsByID), ctx, newsID)
}

// EditNewsByID mocks base method.
func (m *MockNews) EditNewsByID(ctx context.Context, newsID, userUpdated uuid.UUID, newsAttr *models.NewsAttributes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditNewsByID", ctx, newsID, userUpdated, newsAttr)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditNewsByID indicates an expected call of EditNewsByID.
func (mr *MockNewsMockRecorder) EditNewsByID(ctx, newsID, userUpdated, newsAttr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditNewsByID", reflect.TypeOf((*MockNews)(nil).EditNewsByID), ctx, newsID, userUpdated, newsAttr)
}

// GetDeletingFiles mocks base method.
func (m *MockNews) GetDeletingFiles(ctx context.Context) ([]*models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletingFiles", ctx)
	ret0, _ := ret[0].([]*models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletingFiles indicates an expected call of GetDeletingFiles.
func (mr *MockNewsMockRecorder) GetDeletingFiles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletingFiles", reflect.TypeOf((*MockNews)(nil).GetDeletingFiles), ctx)
}

// GetNewsByIDs mocks base method.
func (m *MockNews) GetNewsByIDs(ctx context.Context, newsIDs []uuid.UUID) ([]*models.NewsAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsByIDs", ctx, newsIDs)
	ret0, _ := ret[0].([]*models.NewsAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsByIDs indicates an expected call of GetNewsByIDs.
func (mr *MockNewsMockRecorder) GetNewsByIDs(ctx, newsIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsByIDs", reflect.TypeOf((*MockNews)(nil).GetNewsByIDs), ctx, newsIDs)
}

// GetNewsFileByID mocks base method.
func (m *MockNews) GetNewsFileByID(ctx context.Context, fileID uuid.UUID) (*models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsFileByID", ctx, fileID)
	ret0, _ := ret[0].(*models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsFileByID indicates an expected call of GetNewsFileByID.
func (mr *MockNewsMockRecorder) GetNewsFileByID(ctx, fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsFileByID", reflect.TypeOf((*MockNews)(nil).GetNewsFileByID), ctx, fileID)
}

// GetNewsList mocks base method.
func (m *MockNews) GetNewsList(ctx context.Context, limit, offset int) ([]*models.NewsAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsList", ctx, limit, offset)
	ret0, _ := ret[0].([]*models.NewsAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsList indicates an expected call of GetNewsList.
func (mr *MockNewsMockRecorder) GetNewsList(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsList", reflect.TypeOf((*MockNews)(nil).GetNewsList), ctx, limit, offset)
}

// SetHardDeletedFilesByIDs mocks base method.
func (m *MockNews) SetHardDeletedFilesByIDs(ctx context.Context, files []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHardDeletedFilesByIDs", ctx, files)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHardDeletedFilesByIDs indicates an expected call of SetHardDeletedFilesByIDs.
func (mr *MockNewsMockRecorder) SetHardDeletedFilesByIDs(ctx, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHardDeletedFilesByIDs", reflect.TypeOf((*MockNews)(nil).SetHardDeletedFilesByIDs), ctx, files)
}

// MockActivities is a mock of Activities interface.
type MockActivities struct {
	ctrl     *gomock.Controller
	recorder *MockActivitiesMockRecorder
}

// MockActivitiesMockRecorder is the mock recorder for MockActivities.
type MockActivitiesMockRecorder struct {
	mock *MockActivities
}

// NewMockActivities creates a new mock instance.
func NewMockActivities(ctrl *gomock.Controller) *MockActivities {
	mock := &MockActivities{ctrl: ctrl}
	mock.recorder = &MockActivitiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivities) EXPECT() *MockActivitiesMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockActivities) CreateComment(ctx context.Context, newsID uuid.UUID, comment *models.Comment) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, newsID, comment)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockActivitiesMockRecorder) CreateComment(ctx, newsID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockActivities)(nil).CreateComment), ctx, newsID, comment)
}

// CreateLike mocks base method.
func (m *MockActivities) CreateLike(ctx context.Context, newsID, likerID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", ctx, newsID, likerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockActivitiesMockRecorder) CreateLike(ctx, newsID, likerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockActivities)(nil).CreateLike), ctx, newsID, likerID)
}

// DeleteComment mocks base method.
func (m *MockActivities) DeleteComment(ctx context.Context, commentID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockActivitiesMockRecorder) DeleteComment(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockActivities)(nil).DeleteComment), ctx, commentID)
}

// DeleteLike mocks base method.
func (m *MockActivities) DeleteLike(ctx context.Context, newsID, likerID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", ctx, newsID, likerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockActivitiesMockRecorder) DeleteLike(ctx, newsID, likerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockActivities)(nil).DeleteLike), ctx, newsID, likerID)
}

// EditComment mocks base method.
func (m *MockActivities) EditComment(ctx context.Context, comment *models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditComment indicates an expected call of EditComment.
func (mr *MockActivitiesMockRecorder) EditComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockActivities)(nil).EditComment), ctx, comment)
}

// GetCommentsByNewsID mocks base method.
func (m *MockActivities) GetCommentsByNewsID(ctx context.Context, newsID uuid.UUID) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByNewsID", ctx, newsID)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByNewsID indicates an expected call of GetCommentsByNewsID.
func (mr *MockActivitiesMockRecorder) GetCommentsByNewsID(ctx, newsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByNewsID", reflect.TypeOf((*MockActivities)(nil).GetCommentsByNewsID), ctx, newsID)
}

// GetLikesByNewsID mocks base method.
func (m *MockActivities) GetLikesByNewsID(ctx context.Context, newsID uuid.UUID) ([]*models.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesByNewsID", ctx, newsID)
	ret0, _ := ret[0].([]*models.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesByNewsID indicates an expected call of GetLikesByNewsID.
func (mr *MockActivitiesMockRecorder) GetLikesByNewsID(ctx, newsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesByNewsID", reflect.TypeOf((*MockActivities)(nil).GetLikesByNewsID), ctx, newsID)
}
