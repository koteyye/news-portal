// Code generated by MockGen. DO NOT EDIT.
// Source: s3.go

// Package mock_s3 is a generated GoMock package.
package mock_s3

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	minio "github.com/minio/minio-go/v7"
)

// MockS3 is a mock of S3 interface.
type MockS3 struct {
	ctrl     *gomock.Controller
	recorder *MockS3MockRecorder
}

// MockS3MockRecorder is the mock recorder for MockS3.
type MockS3MockRecorder struct {
	mock *MockS3
}

// NewMockS3 creates a new mock instance.
func NewMockS3(ctrl *gomock.Controller) *MockS3 {
	mock := &MockS3{ctrl: ctrl}
	mock.recorder = &MockS3MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3) EXPECT() *MockS3MockRecorder {
	return m.recorder
}

// GetFile mocks base method.
func (m *MockS3) GetFile(ctx context.Context, bucketName, filename string) (*minio.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, bucketName, filename)
	ret0, _ := ret[0].(*minio.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockS3MockRecorder) GetFile(ctx, bucketName, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockS3)(nil).GetFile), ctx, bucketName, filename)
}

// GetStats mocks base method.
func (m *MockS3) GetStats(ctx context.Context, bucketName, filename string) (*minio.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx, bucketName, filename)
	ret0, _ := ret[0].(*minio.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockS3MockRecorder) GetStats(ctx, bucketName, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockS3)(nil).GetStats), ctx, bucketName, filename)
}

// Ping mocks base method.
func (m *MockS3) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockS3MockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockS3)(nil).Ping), arg0)
}

// RemoveFile mocks base method.
func (m *MockS3) RemoveFile(ctx context.Context, bucketName, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", ctx, bucketName, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockS3MockRecorder) RemoveFile(ctx, bucketName, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockS3)(nil).RemoveFile), ctx, bucketName, filename)
}

// UploadFile mocks base method.
func (m *MockS3) UploadFile(ctx context.Context, reader io.Reader, bucketName, filename string, fileSize int64) (minio.UploadInfo, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, reader, bucketName, filename, fileSize)
	ret0, _ := ret[0].(minio.UploadInfo)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockS3MockRecorder) UploadFile(ctx, reader, bucketName, filename, fileSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockS3)(nil).UploadFile), ctx, reader, bucketName, filename, fileSize)
}
